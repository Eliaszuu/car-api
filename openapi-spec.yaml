openapi: 3.0.3
info:
  version: 0.0.1
  title: M320 Car API
  description: M320 CRUD + OpenAPI, Made by Elias and Lorenz
servers:
  - url: http://localhost:8080

paths:
  /api/cars:
    get:
      summary: Returns all cars
      operationId: getAllCars
      responses:
        200:
          description: A list of all cars in the system
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/car'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SampleError'

    post:
      summary: Adds a car to the list
      requestBody:
        description: The car to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/car'
      responses:
        201:
          description: The added car
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/car'
        400:
          description: Invalid request payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SampleError'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SampleError'

  /api/cars/{id}:
    get:
      summary: Returns a car by ID
      operationId: getCarsByID
      parameters:
        - name: id
          in: path
          description: The ID of the car to retrieve
          required: true
          schema:
            type: string
      responses:
        200:
          description: The car with the given ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/car'
        404:
          description: Car not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SampleError'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SampleError'

    put:
      summary: Updates a car by ID
      operationId: updateCarByID
      parameters:
        - name: id
          in: path
          description: The ID of the car to update
          required: true
          schema:
            type: string
      requestBody:
        description: The updated car data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/car'
      responses:
        200:
          description: The updated car
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/car'
        400:
          description: Invalid request payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SampleError'
        404:
          description: Car not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SampleError'

    delete:
      summary: Deletes a car by ID
      operationId: deleteCarByID
      parameters:
        - name: id
          in: path
          description: The ID of the car to delete
          required: true
          schema:
            type: string
      responses:
        204:
          description: Car successfully deleted
        404:
          description: Car not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SampleError'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SampleError'

components:
  schemas:
    car:
      type: object
      description: Car object
      properties:
        id:
          type: string
          example: a5c68e74-96df-4238-bc44-e96b7864fe8c
        createTimestamp:
          type: string
          example: 2024-12-02T08:11:32.3263381+01:00
          format: date-time
        brand:
          type: string
          example: Mercedes
        model:
          type: string
          example: G-Klasse
        color:
          type: string
          example: blue
        year:
          type: integer
          example: 2015
        engine:
          type: string
          example: Three Cylinder
        ps:
          type: integer
          example: 85
      required:
        - id
        - brand
        - model
        - color
        - year
        - engine
        - ps

    SampleError:
      type: object
      description: Error object
      properties:
        timestamp:
          type: string
          example: 2022-02-28T14:13:56.466
          format: date-time
        status:
          type: integer
          example: 404
        error:
          type: string
          example: Not Found
        path:
          type: string
          example: /api/nonexistent
